/**
 * 1. Keep each expression's text together as much as possible,
 *    but then wrap long words
 */
.euiExpression {
  @include euiFontSizeS;
  @include euiCodeFont;

  border-bottom: 2px solid transparent;
  display: inline-block; /* 1 */
  text-align: left;
  padding: ($euiSizeXS / 2) 0;
  transition: all $euiAnimSpeedNormal $euiAnimSlightBounce;
  color: $euiTextColor;
  vertical-align: bottom;

  &:focus {
    border-bottom-style: solid;
  }

  & + .euiExpression {
    margin-left: $euiSizeS;
  }

  &.euiExpression-columns {
    border: 2px solid transparent;
    margin-bottom: $euiSizeS;
  }

}

.euiExpression-isUppercase .euiExpression__description {
  text-transform: uppercase;
}

// .euiExpression-breakWord {
//   @include euiTextBreakWord; /* 1 */
// }

// .euiExpression-truncate {
//   @include euiTextTruncate;
// }

.euiExpression-isClickable {
  cursor: pointer;
  border-bottom: $euiBorderEditable;

  &:hover:not(:disabled) {
    border-bottom-style: solid;
    transform: translateY(-1px);
  }

  &.euiExpression-columns {
    background-color: $euiColorLightestShade;
    width: 100%;
    display: flex;
    padding: $euiSizeS;
    border-radius: $euiSizeXS;

    .euiExpression__description,
    .euiExpression__value {
      @include euiTextBreakWord;
    }

    .euiExpression__description {
      flex-shrink: 1;
      margin: $euiSizeXS;
    }

    .euiExpression__value {
      flex-shrink: 2;
      margin: $euiSizeXS;
    }
  }
}

.euiExpression-isActive {
  border-bottom-style: solid;
}

.euiPopover__anchor {
  width: 100%;
}

@each $name, $color in $euiExpressionColors {
  .euiExpression--#{$name} {
    &:focus:not(.euiExpression-columns) {
      background-color: transparentize($color, .9);
    }

    &.euiExpression-isActive {
      border-bottom-color: $color;
      border-color: $color;
    }

    .euiExpression__description {
      color: $color;
    }

  }
}